// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clientconfig.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Configuration message
// Allowed with range of VPC Peered to VPN VPC has to be sent to the client
// In order to create iptables rules
type ConfigFileResp struct {
	Keypublic            string   `protobuf:"bytes,1,opt,name=keypublic,proto3" json:"keypublic,omitempty"`
	Allowedrange         string   `protobuf:"bytes,2,opt,name=allowedrange,proto3" json:"allowedrange,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigFileResp) Reset()         { *m = ConfigFileResp{} }
func (m *ConfigFileResp) String() string { return proto.CompactTextString(m) }
func (*ConfigFileResp) ProtoMessage()    {}
func (*ConfigFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_clientconfig_e5bed0a1f7b22636, []int{0}
}
func (m *ConfigFileResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigFileResp.Unmarshal(m, b)
}
func (m *ConfigFileResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigFileResp.Marshal(b, m, deterministic)
}
func (dst *ConfigFileResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigFileResp.Merge(dst, src)
}
func (m *ConfigFileResp) XXX_Size() int {
	return xxx_messageInfo_ConfigFileResp.Size(m)
}
func (m *ConfigFileResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigFileResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigFileResp proto.InternalMessageInfo

func (m *ConfigFileResp) GetKeypublic() string {
	if m != nil {
		return m.Keypublic
	}
	return ""
}

func (m *ConfigFileResp) GetAllowedrange() string {
	if m != nil {
		return m.Allowedrange
	}
	return ""
}

// Ack to webserver
type Request struct {
	Request              bool     `protobuf:"varint,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_clientconfig_e5bed0a1f7b22636, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetRequest() bool {
	if m != nil {
		return m.Request
	}
	return false
}

func init() {
	proto.RegisterType((*ConfigFileResp)(nil), "clientconfig.ConfigFileResp")
	proto.RegisterType((*Request)(nil), "clientconfig.Request")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientConfigClient is the client API for ClientConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientConfigClient interface {
	GetClientConfig(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ConfigFileResp, error)
}

type clientConfigClient struct {
	cc *grpc.ClientConn
}

func NewClientConfigClient(cc *grpc.ClientConn) ClientConfigClient {
	return &clientConfigClient{cc}
}

func (c *clientConfigClient) GetClientConfig(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ConfigFileResp, error) {
	out := new(ConfigFileResp)
	err := c.cc.Invoke(ctx, "/clientconfig.ClientConfig/GetClientConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientConfigServer is the server API for ClientConfig service.
type ClientConfigServer interface {
	GetClientConfig(context.Context, *Request) (*ConfigFileResp, error)
}

func RegisterClientConfigServer(s *grpc.Server, srv ClientConfigServer) {
	s.RegisterService(&_ClientConfig_serviceDesc, srv)
}

func _ClientConfig_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientConfigServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientconfig.ClientConfig/GetClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientConfigServer).GetClientConfig(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientconfig.ClientConfig",
	HandlerType: (*ClientConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientConfig",
			Handler:    _ClientConfig_GetClientConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientconfig.proto",
}

// SendClientConfigClient is the client API for SendClientConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendClientConfigClient interface {
	SendClientConfig(ctx context.Context, in *ConfigFileResp, opts ...grpc.CallOption) (*Request, error)
}

type sendClientConfigClient struct {
	cc *grpc.ClientConn
}

func NewSendClientConfigClient(cc *grpc.ClientConn) SendClientConfigClient {
	return &sendClientConfigClient{cc}
}

func (c *sendClientConfigClient) SendClientConfig(ctx context.Context, in *ConfigFileResp, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/clientconfig.SendClientConfig/SendClientConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendClientConfigServer is the server API for SendClientConfig service.
type SendClientConfigServer interface {
	SendClientConfig(context.Context, *ConfigFileResp) (*Request, error)
}

func RegisterSendClientConfigServer(s *grpc.Server, srv SendClientConfigServer) {
	s.RegisterService(&_SendClientConfig_serviceDesc, srv)
}

func _SendClientConfig_SendClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigFileResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendClientConfigServer).SendClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientconfig.SendClientConfig/SendClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendClientConfigServer).SendClientConfig(ctx, req.(*ConfigFileResp))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendClientConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientconfig.SendClientConfig",
	HandlerType: (*SendClientConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendClientConfig",
			Handler:    _SendClientConfig_SendClientConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientconfig.proto",
}

func init() { proto.RegisterFile("clientconfig.proto", fileDescriptor_clientconfig_e5bed0a1f7b22636) }

var fileDescriptor_clientconfig_e5bed0a1f7b22636 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x49, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x41, 0x16, 0x53, 0x0a, 0xe2, 0xe2, 0x73, 0x06, 0xb3, 0xdc, 0x32, 0x73, 0x52, 0x83, 0x52, 0x8b,
	0x0b, 0x84, 0x64, 0xb8, 0x38, 0xb3, 0x53, 0x2b, 0x0b, 0x4a, 0x93, 0x72, 0x32, 0x93, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x10, 0x02, 0x42, 0x4a, 0x5c, 0x3c, 0x89, 0x39, 0x39, 0xf9, 0xe5,
	0xa9, 0x29, 0x45, 0x89, 0x79, 0xe9, 0xa9, 0x12, 0x4c, 0x60, 0x05, 0x28, 0x62, 0x4a, 0xca, 0x5c,
	0xec, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0x45, 0x10, 0x26, 0xd8,
	0x28, 0x8e, 0x20, 0x18, 0xd7, 0x28, 0x82, 0x8b, 0xc7, 0x19, 0xec, 0x10, 0x88, 0xf5, 0x42, 0x1e,
	0x5c, 0xfc, 0xee, 0xa9, 0x25, 0x28, 0x42, 0xa2, 0x7a, 0x28, 0xce, 0x87, 0x9a, 0x29, 0x25, 0x83,
	0x2a, 0x8c, 0xea, 0x7c, 0x25, 0x06, 0xa3, 0x58, 0x2e, 0x81, 0xe0, 0xd4, 0xbc, 0x14, 0x14, 0xa3,
	0x3c, 0xb1, 0x88, 0xe1, 0x35, 0x47, 0x0a, 0xbb, 0xe5, 0x4a, 0x0c, 0x4e, 0x2c, 0x51, 0x4c, 0x05,
	0x49, 0x49, 0x6c, 0xe0, 0xc0, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x00, 0x4c, 0x0f, 0x04,
	0x62, 0x01, 0x00, 0x00,
}
