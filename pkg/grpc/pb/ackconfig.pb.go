// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ackconfig.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Receive Status for VPN Server and the servername
type State struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Serverid             string   `protobuf:"bytes,2,opt,name=serverid,proto3" json:"serverid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_ackconfig_f4b6e7c6241d1203, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (dst *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(dst, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *State) GetServerid() string {
	if m != nil {
		return m.Serverid
	}
	return ""
}

// Acknoledge message received from node controller
type AckNode struct {
	Ack                  bool     `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckNode) Reset()         { *m = AckNode{} }
func (m *AckNode) String() string { return proto.CompactTextString(m) }
func (*AckNode) ProtoMessage()    {}
func (*AckNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ackconfig_f4b6e7c6241d1203, []int{1}
}
func (m *AckNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckNode.Unmarshal(m, b)
}
func (m *AckNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckNode.Marshal(b, m, deterministic)
}
func (dst *AckNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckNode.Merge(dst, src)
}
func (m *AckNode) XXX_Size() int {
	return xxx_messageInfo_AckNode.Size(m)
}
func (m *AckNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AckNode.DiscardUnknown(m)
}

var xxx_messageInfo_AckNode proto.InternalMessageInfo

func (m *AckNode) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func init() {
	proto.RegisterType((*State)(nil), "ackconfig.State")
	proto.RegisterType((*AckNode)(nil), "ackconfig.AckNode")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AckConfigClient is the client API for AckConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AckConfigClient interface {
	GetAck(ctx context.Context, in *State, opts ...grpc.CallOption) (*AckNode, error)
}

type ackConfigClient struct {
	cc *grpc.ClientConn
}

func NewAckConfigClient(cc *grpc.ClientConn) AckConfigClient {
	return &ackConfigClient{cc}
}

func (c *ackConfigClient) GetAck(ctx context.Context, in *State, opts ...grpc.CallOption) (*AckNode, error) {
	out := new(AckNode)
	err := c.cc.Invoke(ctx, "/ackconfig.AckConfig/GetAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AckConfigServer is the server API for AckConfig service.
type AckConfigServer interface {
	GetAck(context.Context, *State) (*AckNode, error)
}

func RegisterAckConfigServer(s *grpc.Server, srv AckConfigServer) {
	s.RegisterService(&_AckConfig_serviceDesc, srv)
}

func _AckConfig_GetAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AckConfigServer).GetAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ackconfig.AckConfig/GetAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AckConfigServer).GetAck(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

var _AckConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ackconfig.AckConfig",
	HandlerType: (*AckConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAck",
			Handler:    _AckConfig_GetAck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ackconfig.proto",
}

func init() { proto.RegisterFile("ackconfig.proto", fileDescriptor_ackconfig_f4b6e7c6241d1203) }

var fileDescriptor_ackconfig_f4b6e7c6241d1203 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4c, 0xce, 0x4e,
	0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x59, 0x73, 0xb1, 0x06, 0x97, 0x24, 0x96, 0xa4, 0x0a, 0x89, 0x71, 0xb1, 0x15, 0x97, 0x24, 0x96,
	0x94, 0x16, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x79, 0x42, 0x52, 0x5c, 0x1c, 0xc5,
	0xa9, 0x45, 0x65, 0xa9, 0x45, 0x99, 0x29, 0x12, 0x4c, 0x60, 0x19, 0x38, 0x5f, 0x49, 0x9a, 0x8b,
	0xdd, 0x31, 0x39, 0xdb, 0x2f, 0x3f, 0x25, 0x55, 0x48, 0x80, 0x8b, 0x39, 0x31, 0x39, 0x1b, 0xac,
	0x97, 0x23, 0x08, 0xc4, 0x34, 0xb2, 0xe5, 0xe2, 0x74, 0x4c, 0xce, 0x76, 0x06, 0x5b, 0x23, 0x64,
	0xc0, 0xc5, 0xe6, 0x9e, 0x5a, 0xe2, 0x98, 0x9c, 0x2d, 0x24, 0xa0, 0x87, 0x70, 0x0d, 0xd8, 0x66,
	0x29, 0x21, 0x24, 0x11, 0xa8, 0x71, 0x4a, 0x0c, 0x4e, 0x2c, 0x51, 0x4c, 0x05, 0x49, 0x49, 0x6c,
	0x60, 0x07, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x13, 0x48, 0xa3, 0x5b, 0xc3, 0x00, 0x00,
	0x00,
}
